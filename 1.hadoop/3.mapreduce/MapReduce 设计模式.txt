MapReduce 设计模式

寻找问题的递归解决方案会比较有挑战性，但一旦找到了问题的解决方案，问题将变得清晰，精准， 优雅。
在很多情况下， 需要关注 MapReduce 作业所需要的系统资源，尤其是集群内网络资源的使用情况。这是 MapReduce 框架在设计上的取舍， 是在需要考虑 并发，容错，扩展性以及其它挑战与只关注数据的分布式处理之间的平衡。
但是， 独特的系统加上独特的问题使得解决方案产生了独特的设计模式。

MapReduce 过程有哪些？
1. Hadoop MapReduce 作业被分成一系列运行在分布式集群中的 map 任务和 reduce 任务。
每个任务都工作在被指定的小的数据子集上， 因此负载是遍布集群中的各个节点上的。
map 任务： 数据的载入，解析，转换，过滤。
reduce 任务： 处理 mapper 任务输出结果的一个子集。从 mapper 任务处复制 map 任务的中间数据，进行分组和聚合操作。

map 阶段：
1. record reader
    读取数据，将输入数据解析成记录，但不解析记录本身

2. map
    处理输入的每一条 KV 记录， 并产生 0个或多个 KV 结果

3. combiner
    combiner 是一个可选的本地 reducer, 可以在 map 阶段聚合数据。
    combiner 通过执行用户指定的来自 mapper 的中间结果做单个 map 范围内的聚合。

4. partitioner
    partitioner 的作用是将 mapper (或是 combiner) 输出的 KV 对拆分为分片(shard), 每个 reducer 对应一个分片。 默认情况下，partitioner 先计算目标的散列值 (通常是 MD5).
    然后， 通过 reducer 个数执行去模运算 key.hashcode() % (reducer 的个数)。
    这种方式不仅能够随机地将整个空间平均发给每个 reducer, 同时也能确保不同 mapper 产生的相同 key 能够被分发至同一个 reducer。
    (key md5， hashcode % reducer num) -> 确认分片

reduce 阶段
1. shuffle （混排）
2. sort （排序）
    将所有 partitioner 写入的输出文件拉取到运行 reducer 的本地机器上，然后将这些数据按照 key 排序写到一个较大的数据列表中。
    排序的目的是将相同 key 的记录聚合在一起，这样其所对应的值就可以很方便地在 reduce 中进行迭代处理。
    可以通过自定义 Comparator 对象来确定 key 如何排序和分组。

3. reduce
    reducer 将已经分好组的数据作为输入，并依次为每个键对于分组执行 reduce 函数。 reduce 函数的输入是 key， value 集合迭代器。
    然后， 可以进行聚合，过滤， 或其它处理方式。

4. output format 输出格式
    输出格式获取 reduce 函数输出的最终 KV 对， 并通过 record writer 将它写入到输出文件中。
    每条记录 key 和 value 默认通过 tab 分隔， 不同记录通过换行符分隔。


MapReduce 设计模式
1. 概要模式
    1. 数值概要
    目的
    基于某个 key 将记录分组， 并对每个分组计算一系列的聚合值，从而得到较大数据集的高层次视图

    适用场景
    - 要处理的是数值数据或是计数
    - 数据可以按某些特定字段分组

    已知应用
    单词计数
    记录计数
    最大值/最小值/计数
    平均值/中位数/标准差

    2. 倒排索引
    目的
    产生一个数据集的索引以提供更快的搜索或数据丰富能力

    适用场景
    通常在需要快速搜索查询响应的场景。可以对一个查询的结果进行预处理并存储在一个数据库中。


使用 MapReduce 构建倒排索引流程
1. mapper 输出索引所需要的字段作为键，全局唯一的标识符作为值。
2. 如果仅使用 identity reducer, 则可省略 combiner, 因为在这种场景下， combiner 起不到任何作用。 
    某些实现会将一个分组对应的值连接起来，然后输出到文件系统上。

3. partitioner 确定同一个键的值会被 reducer 复制到哪里从而最终输出。
4. reducer 将收到由输入键映射到的一组唯一的记录标识符的集合。
    标识符可以通过使用统一的分隔符连接起来对每一个分组产生一个输出 KV 对，也可以像 identity reducer 中实现的那样将每一个输入值和对应的输入键一起输出。

建立倒排索引的性能指标：
1. mapper 端内容解析的计算成本
2. 需要索引的键 key 的基数
3. 每一个键的对应的内容标识符的数目

    3. 计数器计数
    目的
    得到大数据集计数概要的一种高效方式

    适用场景
    在一个大数据集收集计数或汇总
    需要创建的计数器数据很小--两位数字以内